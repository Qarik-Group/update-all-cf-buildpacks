meta:
  name:     (( param "Please name your pipeline" ))
  pipeline: (( grab meta.name ))
  target:   (( param "Please identify the name of the target Concourse CI" ))
  url:      (( param "Please specify the full url of the target Concourse CI" ))
  image:
    type: docker-image
    source:
      name: starkandwayne/concourse-kubernetes
      tag: latest

  github:
    uri:          (( concat "git@github.com:" meta.github.owner "/" meta.github.repo ))
    owner:        (( param "Please specify the name of the user / organization that owns the Github repository" ))
    repo:         (( param "Please specify the name of the Github repository" ))
    branch:       master
    private_key:  (( param "Please generate an SSH Deployment Key for this repo and specify it here" ))
    access_token: (( param "Please generate a Personal Access Token and specify it here (read-only for repos, to avoid rate limiting)" ))

  dockerhub:
    username: ((docker-hub-username))
    password: ((docker-hub-password))

  aws:
    bucket:     (( concat meta.name "-pipeline" ))
    region_name: us-east-1
    access_key: (( param "Please set your AWS Access Key ID" ))
    secret_key: (( param "Please set your AWS Secret Key ID" ))

  chartmuseum:
    uri: https://chartmuseum.starkandwayne.com
    user: (( param "Please provide basic auth user for chartmuseum" ))
    pass: (( param "Please provide basic auth password for chartmuseum" ))

  slack:
    webhook:       (( param "Please specify your Slack Incoming Webhook Integration URL" ))
    success_moji:  ":airplane_departure:"
    fail_moji:     ":airplane_arriving:"
    upset_moji:    ":sad_panda:"
    channel:       (( param "Please specify the channel (#name) or user (@user) to send messages to" ))
    username:      concourse
    icon:          https://cl.ly/2F421Y300u07/concourse-logo-blue-transparent.png
    fail_url: '(( concat "<" meta.url "/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME| Concourse Failure! " meta.slack.upset_moji ">" ))'

groups:
- name: update-all-cf-buildpacks
  jobs:
  - image-latest
  - pre
  - rc
- name: buildpacks
  jobs:
  - binary-buildpack
  - dotnet-core-buildpack
  - go-buildpack
  - nginx-buildpack
  - nodejs-buildpack
  - php-buildpack
  - python-buildpack
  - r-buildpack
  - ruby-buildpack
  - staticfile-buildpack
  - java-buildpack
- name: versioning
  jobs:
  - major
  - minor
  - patch

jobs:
- name: image-latest
  public: true
  plan:
  - { get: git, trigger: true }
  - put: image-latest
    params:
      build: git

- name: binary-buildpack
  public: true
  plan:
  - { get: git }
  - { get: binary-buildpack, trigger: true, params: {globs: ["*cflinuxfs3*.zip"]} }
  - task: update-script
    config:
      platform: linux
      image_resource: (( grab meta.image ))
      inputs:
      - name: git
      - name: binary-buildpack
      outputs:
      - name: pushme
      params:
        GITHUB_REPO: binary-buildpack
        BUILDPACK_NAME: binary_buildpack
      run:
        path: git/ci/scripts/update-buildpack.sh
  - put: git
    params:
      rebase: true
      repository: pushme

- name: dotnet-core-buildpack
  public: true
  plan:
  - { get: git }
  - { get: dotnet-core-buildpack, trigger: true, params: {globs: ["*cflinuxfs3*.zip"]} }
  - task: update-script
    config:
      platform: linux
      image_resource: (( grab meta.image ))
      inputs:
      - name: git
      - name: dotnet-core-buildpack
      outputs:
      - name: pushme
      params:
        GITHUB_REPO: dotnet-core-buildpack
        BUILDPACK_NAME: dotnet_core_buildpack
      run:
        path: git/ci/scripts/update-buildpack.sh
  - put: git
    params:
      rebase: true
      repository: pushme

- name: go-buildpack
  public: true
  plan:
  - { get: git }
  - { get: go-buildpack, trigger: true, params: {globs: ["*cflinuxfs3*.zip"]} }
  - task: update-script
    config:
      platform: linux
      image_resource: (( grab meta.image ))
      inputs:
      - name: git
      - name: go-buildpack
      outputs:
      - name: pushme
      params:
        GITHUB_REPO: go-buildpack
        BUILDPACK_NAME: go_buildpack
      run:
        path: git/ci/scripts/update-buildpack.sh
  - put: git
    params:
      rebase: true
      repository: pushme

- name: nginx-buildpack
  public: true
  plan:
  - { get: git }
  - { get: nginx-buildpack, trigger: true, params: {globs: ["*cflinuxfs3*.zip"]} }
  - task: update-script
    config:
      platform: linux
      image_resource: (( grab meta.image ))
      inputs:
      - name: git
      - name: nginx-buildpack
      outputs:
      - name: pushme
      params:
        GITHUB_REPO: nginx-buildpack
        BUILDPACK_NAME: nginx_buildpack
      run:
        path: git/ci/scripts/update-buildpack.sh
  - put: git
    params:
      rebase: true
      repository: pushme

- name: nodejs-buildpack
  public: true
  plan:
  - { get: git }
  - { get: nodejs-buildpack, trigger: true, params: {globs: ["*cflinuxfs3*.zip"]} }
  - task: update-script
    config:
      platform: linux
      image_resource: (( grab meta.image ))
      inputs:
      - name: git
      - name: nodejs-buildpack
      outputs:
      - name: pushme
      params:
        GITHUB_REPO: nodejs-buildpack
        BUILDPACK_NAME: nodejs_buildpack
      run:
        path: git/ci/scripts/update-buildpack.sh
  - put: git
    params:
      rebase: true
      repository: pushme

- name: php-buildpack
  public: true
  plan:
  - { get: git }
  - { get: php-buildpack, trigger: true, params: {globs: ["*cflinuxfs3*.zip"]} }
  - task: update-script
    config:
      platform: linux
      image_resource: (( grab meta.image ))
      inputs:
      - name: git
      - name: php-buildpack
      outputs:
      - name: pushme
      params:
        GITHUB_REPO: php-buildpack
        BUILDPACK_NAME: php_buildpack
      run:
        path: git/ci/scripts/update-buildpack.sh
  - put: git
    params:
      rebase: true
      repository: pushme

- name: python-buildpack
  public: true
  plan:
  - { get: git }
  - { get: python-buildpack, trigger: true, params: {globs: ["*cflinuxfs3*.zip"]} }
  - task: update-script
    config:
      platform: linux
      image_resource: (( grab meta.image ))
      inputs:
      - name: git
      - name: python-buildpack
      outputs:
      - name: pushme
      params:
        GITHUB_REPO: python-buildpack
        BUILDPACK_NAME: python_buildpack
      run:
        path: git/ci/scripts/update-buildpack.sh
  - put: git
    params:
      rebase: true
      repository: pushme

- name: r-buildpack
  public: true
  plan:
  - { get: git }
  - { get: r-buildpack, trigger: true, params: {globs: ["*cflinuxfs3*.zip"]} }
  - task: update-script
    config:
      platform: linux
      image_resource: (( grab meta.image ))
      inputs:
      - name: git
      - name: r-buildpack
      outputs:
      - name: pushme
      params:
        GITHUB_REPO: r-buildpack
        BUILDPACK_NAME: r_buildpack
      run:
        path: git/ci/scripts/update-buildpack.sh
  - put: git
    params:
      rebase: true
      repository: pushme

- name: ruby-buildpack
  public: true
  plan:
  - { get: git }
  - { get: ruby-buildpack, trigger: true, params: {globs: ["*cflinuxfs3*.zip"]} }
  - task: update-script
    config:
      platform: linux
      image_resource: (( grab meta.image ))
      inputs:
      - name: git
      - name: ruby-buildpack
      outputs:
      - name: pushme
      params:
        GITHUB_REPO: ruby-buildpack
        BUILDPACK_NAME: ruby_buildpack
      run:
        path: git/ci/scripts/update-buildpack.sh
  - put: git
    params:
      rebase: true
      repository: pushme

- name: staticfile-buildpack
  public: true
  plan:
  - { get: git }
  - { get: staticfile-buildpack, trigger: true, params: {globs: ["*cflinuxfs3*.zip"]} }
  - task: update-script
    config:
      platform: linux
      image_resource: (( grab meta.image ))
      inputs:
      - name: git
      - name: staticfile-buildpack
      outputs:
      - name: pushme
      params:
        GITHUB_REPO: staticfile-buildpack
        BUILDPACK_NAME: staticfile_buildpack
      run:
        path: git/ci/scripts/update-buildpack.sh
  - put: git
    params:
      rebase: true
      repository: pushme

- name: java-buildpack
  public: true
  plan:
  - { get: git }
  - { get: java-buildpack, trigger: true }
  - task: update-script
    config:
      platform: linux
      image_resource: (( grab meta.image ))
      inputs:
      - name: git
      - name: java-buildpack
      outputs:
      - name: pushme
      params:
        GITHUB_REPO: java-buildpack
        BUILDPACK_NAME: java_buildpack
      run:
        path: git/ci/scripts/update-buildpack.sh
  - put: git
    params:
      rebase: true
      repository: pushme

- name: pre
  public: true
  serial: true
  plan:
  - do:
    - get: git
      # passed: [test-c]
      trigger: true
    - get: version
      trigger: true
    - task: release-notes
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: (( grab meta.image.source.name ))
            tag:        (( grab meta.image.source.tag ))
        run:
          path: sh
          args:
          - -ce
          - |
            cd git
            if [ -f ci/release_notes.md ]; then
              echo "######   RELEASE NOTES   ###############"
              echo
              cat ci/release_notes.md
              echo
              echo "########################################"
              echo
            else
              echo "NO RELEASE NOTES HAVE BEEN WRITTEN"
              echo "You *might* want to do that before"
              echo "hitting (+) on that shipit job..."
              echo
            fi
        inputs:
        - name: git
    on_failure:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        link: https://pipes.starkandwayne.com/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
        message: release candidate job 'pre' failed (which is unusual).
        ok: false

- name: rc
  public: true
  serial: true
  plan:
  - do:
    - { get: git,     trigger: true, passed: [pre] }
    - { get: version, trigger: false, params: {pre: rc} }
    - task: release-notes
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: (( grab meta.image.source.name ))
            tag:        (( grab meta.image.source.tag ))
        inputs:
            - { name: git }
        run:
          path: sh
          args:
          - -ce
          - |
            cd git
            if [ -f ci/release_notes.md ]; then
              echo "######   RELEASE NOTES   ###############"
              echo
              cat ci/release_notes.md
              echo
              echo "########################################"
              echo
            else
              echo "NO RELEASE NOTES HAVE BEEN WRITTEN"
              echo "You *might* want to do that before"
              echo "hitting (+) on that shipit job..."
              echo
            fi
    - put: version
      params: {file: version/number}
    on_failure:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:    '(( concat meta.slack.fail_url " " meta.pipeline ": rc job failed" ))'

- name: minor
  public: true
  plan:
    - { get: version, trigger: false, params: {bump: minor} }
    - { put: version,                 params: {file: version/number} }

- name: major
  public: true
  plan:
    - { get: version, trigger: false, params: {bump: major} }
    - { put: version,                 params: {file: version/number} }

- name: patch
  public: true
  plan:
  - do:
    - { get: version, trigger: false, params: {bump: patch} }
    - { put: version,                 params: {file: version/number} }
    on_failure:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:    '(( concat meta.slack.fail_url " " meta.pipeline ": patch job failed" ))'

resources:
- name: git
  type: git
  source:
    uri:         (( grab meta.github.uri ))
    branch:      (( grab meta.github.branch ))
    private_key: (( grab meta.github.private_key ))

- name: binary-buildpack
  type: github-release
  check_every: 10m
  source:
    owner: cloudfoundry
    repository: binary-buildpack
    access_token: (( grab meta.github.access_token ))

- name: dotnet-core-buildpack
  type: github-release
  check_every: 10m
  source:
    owner: cloudfoundry
    repository: dotnet-core-buildpack
    access_token: (( grab meta.github.access_token ))

- name: go-buildpack
  type: github-release
  check_every: 10m
  source:
    owner: cloudfoundry
    repository: go-buildpack
    access_token: (( grab meta.github.access_token ))

- name: nginx-buildpack
  type: github-release
  check_every: 10m
  source:
    owner: cloudfoundry
    repository: nginx-buildpack
    access_token: (( grab meta.github.access_token ))

- name: nodejs-buildpack
  type: github-release
  check_every: 10m
  source:
    owner: cloudfoundry
    repository: nodejs-buildpack
    access_token: (( grab meta.github.access_token ))

- name: php-buildpack
  type: github-release
  check_every: 10m
  source:
    owner: cloudfoundry
    repository: php-buildpack
    access_token: (( grab meta.github.access_token ))

- name: python-buildpack
  type: github-release
  check_every: 10m
  source:
    owner: cloudfoundry
    repository: python-buildpack
    access_token: (( grab meta.github.access_token ))

- name: r-buildpack
  type: github-release
  check_every: 10m
  source:
    owner: cloudfoundry
    repository: r-buildpack
    access_token: (( grab meta.github.access_token ))

- name: ruby-buildpack
  type: github-release
  check_every: 10m
  source:
    owner: cloudfoundry
    repository: ruby-buildpack
    access_token: (( grab meta.github.access_token ))

- name: staticfile-buildpack
  type: github-release
  check_every: 10m
  source:
    owner: cloudfoundry
    repository: staticfile-buildpack
    access_token: (( grab meta.github.access_token ))

- name: java-buildpack
  type: github-release
  check_every: 10m
  source:
    owner: cloudfoundry
    repository: java-buildpack
    access_token: (( grab meta.github.access_token ))

- name: image-latest
  type: docker-image
  source:
    repository: starkandwayne/update-all-cf-buildpacks
    username: (( grab meta.dockerhub.username ))
    password: (( grab meta.dockerhub.password ))

- name: version
  type: semver
  source :
    driver:            s3
    bucket:            (( grab meta.aws.bucket ))
    region_name:       (( grab meta.aws.region_name ))
    key:               version
    access_key_id:     (( grab meta.aws.access_key ))
    secret_access_key: (( grab meta.aws.secret_key ))
    initial_version:   (( grab meta.initial_version || "0.0.1" ))

- name: notify
  type: slack-notification
  source:
    url: (( grab meta.slack.webhook ))

resource_types:
  - name: slack-notification
    type: docker-image
    source:
      repository: cfcommunity/slack-notification-resource
